/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.jacob.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Tweet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -482272679697158643L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tweet\",\"namespace\":\"net.jacob.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"user\",\"type\":\"string\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"favorite\",\"type\":\"string\"},{\"name\":\"isRetweet\",\"type\":\"string\"},{\"name\":\"retweeted\",\"type\":\"string\"},{\"name\":\"sensitive\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long id;
  @Deprecated public java.lang.CharSequence user;
  @Deprecated public java.lang.CharSequence text;
  @Deprecated public java.lang.CharSequence favorite;
  @Deprecated public java.lang.CharSequence isRetweet;
  @Deprecated public java.lang.CharSequence retweeted;
  @Deprecated public java.lang.CharSequence sensitive;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Tweet() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param user The new value for user
   * @param text The new value for text
   * @param favorite The new value for favorite
   * @param isRetweet The new value for isRetweet
   * @param retweeted The new value for retweeted
   * @param sensitive The new value for sensitive
   */
  public Tweet(java.lang.Long id, java.lang.CharSequence user, java.lang.CharSequence text, java.lang.CharSequence favorite, java.lang.CharSequence isRetweet, java.lang.CharSequence retweeted, java.lang.CharSequence sensitive) {
    this.id = id;
    this.user = user;
    this.text = text;
    this.favorite = favorite;
    this.isRetweet = isRetweet;
    this.retweeted = retweeted;
    this.sensitive = sensitive;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return user;
    case 2: return text;
    case 3: return favorite;
    case 4: return isRetweet;
    case 5: return retweeted;
    case 6: return sensitive;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: user = (java.lang.CharSequence)value$; break;
    case 2: text = (java.lang.CharSequence)value$; break;
    case 3: favorite = (java.lang.CharSequence)value$; break;
    case 4: isRetweet = (java.lang.CharSequence)value$; break;
    case 5: retweeted = (java.lang.CharSequence)value$; break;
    case 6: sensitive = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'user' field.
   * @return The value of the 'user' field.
   */
  public java.lang.CharSequence getUser() {
    return user;
  }

  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(java.lang.CharSequence value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.lang.CharSequence getText() {
    return text;
  }

  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.CharSequence value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'favorite' field.
   * @return The value of the 'favorite' field.
   */
  public java.lang.CharSequence getFavorite() {
    return favorite;
  }

  /**
   * Sets the value of the 'favorite' field.
   * @param value the value to set.
   */
  public void setFavorite(java.lang.CharSequence value) {
    this.favorite = value;
  }

  /**
   * Gets the value of the 'isRetweet' field.
   * @return The value of the 'isRetweet' field.
   */
  public java.lang.CharSequence getIsRetweet() {
    return isRetweet;
  }

  /**
   * Sets the value of the 'isRetweet' field.
   * @param value the value to set.
   */
  public void setIsRetweet(java.lang.CharSequence value) {
    this.isRetweet = value;
  }

  /**
   * Gets the value of the 'retweeted' field.
   * @return The value of the 'retweeted' field.
   */
  public java.lang.CharSequence getRetweeted() {
    return retweeted;
  }

  /**
   * Sets the value of the 'retweeted' field.
   * @param value the value to set.
   */
  public void setRetweeted(java.lang.CharSequence value) {
    this.retweeted = value;
  }

  /**
   * Gets the value of the 'sensitive' field.
   * @return The value of the 'sensitive' field.
   */
  public java.lang.CharSequence getSensitive() {
    return sensitive;
  }

  /**
   * Sets the value of the 'sensitive' field.
   * @param value the value to set.
   */
  public void setSensitive(java.lang.CharSequence value) {
    this.sensitive = value;
  }

  /**
   * Creates a new Tweet RecordBuilder.
   * @return A new Tweet RecordBuilder
   */
  public static net.jacob.avro.Tweet.Builder newBuilder() {
    return new net.jacob.avro.Tweet.Builder();
  }

  /**
   * Creates a new Tweet RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Tweet RecordBuilder
   */
  public static net.jacob.avro.Tweet.Builder newBuilder(net.jacob.avro.Tweet.Builder other) {
    return new net.jacob.avro.Tweet.Builder(other);
  }

  /**
   * Creates a new Tweet RecordBuilder by copying an existing Tweet instance.
   * @param other The existing instance to copy.
   * @return A new Tweet RecordBuilder
   */
  public static net.jacob.avro.Tweet.Builder newBuilder(net.jacob.avro.Tweet other) {
    return new net.jacob.avro.Tweet.Builder(other);
  }

  /**
   * RecordBuilder for Tweet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tweet>
    implements org.apache.avro.data.RecordBuilder<Tweet> {

    private long id;
    private java.lang.CharSequence user;
    private java.lang.CharSequence text;
    private java.lang.CharSequence favorite;
    private java.lang.CharSequence isRetweet;
    private java.lang.CharSequence retweeted;
    private java.lang.CharSequence sensitive;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.jacob.avro.Tweet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user)) {
        this.user = data().deepCopy(fields()[1].schema(), other.user);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.text)) {
        this.text = data().deepCopy(fields()[2].schema(), other.text);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.favorite)) {
        this.favorite = data().deepCopy(fields()[3].schema(), other.favorite);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isRetweet)) {
        this.isRetweet = data().deepCopy(fields()[4].schema(), other.isRetweet);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.retweeted)) {
        this.retweeted = data().deepCopy(fields()[5].schema(), other.retweeted);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sensitive)) {
        this.sensitive = data().deepCopy(fields()[6].schema(), other.sensitive);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Tweet instance
     * @param other The existing instance to copy.
     */
    private Builder(net.jacob.avro.Tweet other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user)) {
        this.user = data().deepCopy(fields()[1].schema(), other.user);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.text)) {
        this.text = data().deepCopy(fields()[2].schema(), other.text);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.favorite)) {
        this.favorite = data().deepCopy(fields()[3].schema(), other.favorite);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isRetweet)) {
        this.isRetweet = data().deepCopy(fields()[4].schema(), other.isRetweet);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.retweeted)) {
        this.retweeted = data().deepCopy(fields()[5].schema(), other.retweeted);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sensitive)) {
        this.sensitive = data().deepCopy(fields()[6].schema(), other.sensitive);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'user' field.
      * @return The value.
      */
    public java.lang.CharSequence getUser() {
      return user;
    }

    /**
      * Sets the value of the 'user' field.
      * @param value The value of 'user'.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder setUser(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.user = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'user' field has been set.
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'user' field.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder clearUser() {
      user = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.lang.CharSequence getText() {
      return text;
    }

    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder setText(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.text = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder clearText() {
      text = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'favorite' field.
      * @return The value.
      */
    public java.lang.CharSequence getFavorite() {
      return favorite;
    }

    /**
      * Sets the value of the 'favorite' field.
      * @param value The value of 'favorite'.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder setFavorite(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.favorite = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'favorite' field has been set.
      * @return True if the 'favorite' field has been set, false otherwise.
      */
    public boolean hasFavorite() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'favorite' field.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder clearFavorite() {
      favorite = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'isRetweet' field.
      * @return The value.
      */
    public java.lang.CharSequence getIsRetweet() {
      return isRetweet;
    }

    /**
      * Sets the value of the 'isRetweet' field.
      * @param value The value of 'isRetweet'.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder setIsRetweet(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.isRetweet = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'isRetweet' field has been set.
      * @return True if the 'isRetweet' field has been set, false otherwise.
      */
    public boolean hasIsRetweet() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'isRetweet' field.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder clearIsRetweet() {
      isRetweet = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'retweeted' field.
      * @return The value.
      */
    public java.lang.CharSequence getRetweeted() {
      return retweeted;
    }

    /**
      * Sets the value of the 'retweeted' field.
      * @param value The value of 'retweeted'.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder setRetweeted(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.retweeted = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'retweeted' field has been set.
      * @return True if the 'retweeted' field has been set, false otherwise.
      */
    public boolean hasRetweeted() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'retweeted' field.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder clearRetweeted() {
      retweeted = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'sensitive' field.
      * @return The value.
      */
    public java.lang.CharSequence getSensitive() {
      return sensitive;
    }

    /**
      * Sets the value of the 'sensitive' field.
      * @param value The value of 'sensitive'.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder setSensitive(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.sensitive = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'sensitive' field has been set.
      * @return True if the 'sensitive' field has been set, false otherwise.
      */
    public boolean hasSensitive() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'sensitive' field.
      * @return This builder.
      */
    public net.jacob.avro.Tweet.Builder clearSensitive() {
      sensitive = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Tweet build() {
      try {
        Tweet record = new Tweet();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.user = fieldSetFlags()[1] ? this.user : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.text = fieldSetFlags()[2] ? this.text : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.favorite = fieldSetFlags()[3] ? this.favorite : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.isRetweet = fieldSetFlags()[4] ? this.isRetweet : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.retweeted = fieldSetFlags()[5] ? this.retweeted : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.sensitive = fieldSetFlags()[6] ? this.sensitive : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
